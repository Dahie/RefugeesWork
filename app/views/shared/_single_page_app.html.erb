<%
###############################################################################
# SELECT DATA for PRESENTATION
###############################################################################
params = {
  data:             [ # API: "/v0.0.1/api/campaigns"
    { # API: "/v0.0.1/api/campaigns/:integer"
      title:        'Dummy1',
      description:  'This is dummy 1',
      counter:      1
    },{
      title:        'Dummy2',
      description:  'This is dummy 2',
      counter:      2
    }
  ],
  collection:       { # API: "/v0.0.1/api/campaigns/collection"
    title:          ['Dummy1', 'Dummy2'],
    description:    ['This is dummy 1', 'This is dummy 2'],
    counter:        [1, 2]
  },
  schema:           { # API: "/v0.0.1/api/campaigns/schema"
    title:          'string',
    description:    'string',
    counter:        'integer'
  },
  user:             { # API: "/v0.0.1/api/user?email=xxx&password=xxx&secret=xxx"
    id:             @current_user.try(:id),
    name:           @current_user.try(:name),
    email:          @current_user.try(:email),
    secret:         form_authenticity_token
  },
  containerID:      'CONTENT'
}
###############################################################################
# VALIDATE CONTRACT (Between FRONTEND DEV and BACKEND DEV)
###############################################################################
V8::Context.new do |v8|
# @TODO: improve validation to have a "nice" contract between backend/frontend when it comes to sending and receiving DATA
# v8[:TEMP]           = v8.scope.COMPONENT_RainbowUnicorn
# v8[:generateData]   = v8.eval('TEMP.generateData')                                                            
# v8[:SCHEMA]         = v8.eval('TEMP.SCHEMA')
# v8[:getTypes]       = v8.eval('TEMP.getTypes')
# v8[:getValidators]  = v8.eval('TEMP.getValidators')
# v8[:getSamples]     = v8.eval('TEMP.getSamples')
# v8[:VALIDATE]       = v8.eval('TEMP.VALIDATE')
if true # v8.scope.VALIDATE(data_set, data_collections, data_schema)
#############################################################################%>
<!--:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    COMPONENT STYLING - (In Stylus)
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::-->
<link rel='stylesheet' type='text/css' href='./assets/APP.css'>
<!--:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    SERVER SIDE - RENDER WEB COMPONENTS - (for SEO & google crawler)
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::-->
<div id='<%=params[:containerID]%>' data-state='<%#= is_rendered%>'>
<%#=###########################################################################
  # SERVER SIDE Initialization
  # [COMPONENT DOM  - INITIALIZATION & RENDERING (for SEO & google crawler)]
  #       
  # Render TEMPLATE on the Server Side
  # + "data-state" will signal the client, that only updates are needed
  # + data-* attributes is where client side updates will go
  # ==> with MutationObserver on data-* attributes
  #
  # @TODO: This is currently so slow with "TheRubyRacer",
  #       that it is not a viable option, for further details, see:
  #       http://confluence.ikusei.de/display/IKU/Dual+Side+Templating
  #
  #############################################################################
  script      = "#{GoldencobraCrm::Engine.root}/app/assets/javascripts/components/"
  stylesheet  = "#{GoldencobraCrm::Engine.root}/app/assets/stylesheets/components/"
  media       = "#{GoldencobraCrm::Engine.root}/app/assets/images/components/"
  v8.eval('var window = {};')
  v8.load(script + "rainbowunicorn/RainbowUnicorn.bundle.js")
#############################################################################%>
</div>
<!--:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
  CLIENT SIDE - MAIN COMPONENT SCRIPT
    For CommonJS-Incompatible Files
    https://github.com/thlorenz/browserify-shim
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::-->
<script type="text/javascript" src='/assets/APP.bundle.js'></script>
<script>
  /*:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    PROVISORISCH - CLIENT SIDE INITIALIZATION ONLY
    (Will later be rendered by server into data-* attributes)
  :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::*/
  var params = JSON.parse('<%=escape_javascript(params.to_json.html_safe)%>');
  window.onload = function () { APP.START(params); }
</script>
<!--::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::-->
        <%else%><h1>Received invalid DATA from backend</h1><%end end%>
<!--::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::-->





<!--:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
  TEST TEMPLATING
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::-->
<a id="LAYOUT" href="#LAYOUT"> Single Page Layout </a><br>
<hr><%= params %><br><hr><br>
  <h1> Plates Template SPIKE </h1>
  <div id="content"></div><hr>
  <div id="RESULT"></div><hr>
<div id="DEVELOP_MODE" style="position: absolute; left: 5%; width: 90%"></div>
